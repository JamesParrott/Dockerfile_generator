{% macro remove_other_command_parameters(
                commands,
                parameters,
                unused_parameters_command
                ) -%}
{#  parameters: List[str]
    unused_parameters_command: str

    Expects commands to be of the same format as:
    {
      "install_from_main_and_community" : {"format_string" : "RUN apk add --no-cache {parameters}", 
       "supported_parameters" : ["bash",
                                 "dash",
                                 "fish",
                                 "zsh",
                                 "ion-shell",
                                 "tcsh",
                                 "oksh"
                                ],
       "prefix" : "\\\n    ",
       "separator" : " \\\n    " },
      "install_from_testing" : {"format_string" : "RUN apk add --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/testing/ {parameters}", 
       "supported_parameters" : ["elvish"],
       "prefix" : " \\\n    ",
       "separator" : "\\\n    " }
                              }, 
-#}
{% for command_name, other_command in commands.items() -%}
{% if command_name == unused_parameters_command -%}
{% continue -%}
{% endif -%}
{% for parameter in other_command.supported_parameters %}
{% if parameter in parameters -%}
{% do parameters.remove(parameter) -%}
{% endif -%}
{% endfor -%}
{% endfor -%}
{% endmacro -%}


{% set builder = namespace(
                    name = None,
                    previous = None,
                    previous_binaries_dir = BUILDER_DEFAULT_BINARIES_DIR,
                    ) -%}



{% macro render_commands(
    pkgs,
    commands,
    commands_in_order,
    unused_parameters_command,
    runner_binaries_dir,
    builder_info = None
    ) -%}
{#  
pkgs: Container[str]

commands_in_order: Iterable[str]
unused_parameters_command: str
runner_binaries_dir: str
builder_info: namespace(name: str, previous: str, previous_binaries_dir: str)

Expects commands as above, and commands_in_order to be the same format as:
{
      "install_from_main_and_community" : {"format_string" : "RUN apk add --no-cache {parameters}", 
       "supported_parameters" : ["bash",
                                 "dash",
                                 "fish",
                                 "zsh",
                                 "ion-shell",
                                 "tcsh",
                                 "oksh"
                                ],
       "prefix" : "\\\n    ",
       "separator" : " \\\n    " },
      "install_from_testing" : {"format_string" : "RUN apk add --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/testing/ {parameters}", 
       "supported_parameters" : ["elvish"],
       "prefix" : " \\\n    ",
       "separator" : "\\\n    " }
                              },

 ["install_from_main_and_community",
  "install_from_testing",
  "BUILD_STAGES"
 ],
-#}
{% if builder_info is none -%}
    {% set builder_info = builder -%}
{% endif -%}

{% for name in commands_in_order -%}
{% if name == "BUILD_STAGES" -%}
{% if builder_info.name is not none %}

COPY --from={{ builder_info.name }} {{ builder_info.previous_binaries_dir }}/ {{ runner_binaries_dir }}

{% endif -%}
{% else -%}
{% set command = commands[name] -%}
{# If there are no supported parameters, render the format string verbatim,
to support any hard coded Docker command, or to hardcode installation of
packages that are always needed for your app, so they can be omitted from pkgs.
-#}
{% if command.supported_parameters|length == 0 -%}
{{ command.format_string }}

{% else -%}
{# packages are intended to be allowed to appear in multiple commands,
and they are not restricted to RUN package_manager install ... 
e.g. they can be used to setup ssh accounts for each shell.
-#}

{% if name == unused_parameters_command -%}
{% set parameters = pkgs|list() -%}
{#
The macro remove_other_command_parameters gathers unallocated commands,
together with commands allocated to unused_parameters_command, 
into parameters.
-#}
{% do remove_other_command_parameters(
                        commands,
                        parameters,
                        unused_parameters_command
                        ) -%}
{% else -%}
{% set parameters = pkgs|select("in", command.supported_parameters)|list() -%}
{% endif -%}


{% if parameters|length > 1 -%}
{% include command.command_template -%}
{% endif -%}
{#
{% set parameters_str = command.prefix + p-%}
This intentionally both supports pkgs being a list and a dict 
{% for param in parameters[1:] -%}
{{ val_or_key_if_dict_else_key(param, pkgs) }}
{% endfor -%}

{% endif %}
{% set parameters_str = command.separator.join(parameters) -%} 
Don't prepend with a prefix if there's only one item in the list 
(e.g. keep the command to a single line) 
{% if parameters|length > 1 -%}
{% set parameters_str = command.prefix + parameters_str -%}
{% endif -%}
{{ command.format_string.format(parameters = parameters_str) }} -#}

{% endif -%} 
{% endif -%}
{% endfor -%}
{% endmacro -%}