{% set builder = namespace(
                    name = None,
                    previous = None,
                    previous_binaries_dir = BUILDER_DEFAULT_BINARIES_DIR,
                    ) -%}

{% macro render_commands(
    pkgs,
    commands,
    commands_in_order,
    unused_parameters_command,
    runner_binaries_dir,
    builder_info = None
    ) -%}
{#  
pkgs: Container[str]

commands_in_order: Iterable[str]
unused_parameters_command: str
runner_binaries_dir: str
builder_info: namespace(name: str, previous: str, previous_binaries_dir: str)

Expects commands and commands_in_order to be the same format respectively as:
{
      "install_from_main_and_community" : {"format_string" : "RUN apk add --no-cache {parameters}", 
       "supported_parameters" : ["bash",
                                 "dash",
                                 "fish",
                                 "zsh",
                                 "ion-shell",
                                 "tcsh",
                                 "oksh"
                                ],
       "prefix" : "\\\n    ",
       "separator" : " \\\n    " },
      "install_from_testing" : {"format_string" : "RUN apk add --no-cache --repository=https://dl-cdn.alpinelinux.org/alpine/edge/testing/ {parameters}", 
       "supported_parameters" : ["elvish"],
       "prefix" : " \\\n    ",
       "separator" : "\\\n    " }
                              },

 ["install_from_main_and_community",
  "install_from_testing",
  "BUILD_STAGES"
 ],
-#}
{% if builder_info is none -%}
    {% set builder_info = builder -%}
{% endif -%}

{% for name in commands_in_order -%}
{% if name == "BUILD_STAGES" -%}
{% if builder_info.name is not none -%}
COPY --from={{ builder_info.name }} {{ builder_info.previous_binaries_dir }}/ {{ runner_binaries_dir }}

{% endif -%}
{% else -%}
{% set command = commands[name] -%}
{# If there are no supported parameters, render the format string verbatim,
to support any hard coded Docker command, or to hardcode installation of
packages that are always needed for your app, so they can be omitted from pkgs.
-#}
{% if command.supported_parameters|length == 0 -%}
{{ command.format_string }}

{% else -%}
{# packages are intended to be allowed to appear in multiple commands,
and they are not restricted to RUN package_manager install ... 
e.g. they can be used to setup ssh accounts for each shell.
-#}
{% if name != unused_parameters_command -%}
{% set parameters = pkgs|select("in", command.supported_parameters)|list() -%}
{% else -%}
{% set parameters = pkgs.copy() -%}
{% for command_name, other_command in commands.items() -%}
{% if command_name != unused_parameters_command -%}
{% set parameters = parameters|reject("in", other_command.supported_parameters)|list() -%}
{% endif -%}
{% endfor -%}
{% endif -%}
{% if parameters|length >= 1 -%}
{% set parameters_str = command.separator.join(parameters) -%}
{% if parameters|length > 1 -%}
{% set parameters_str = command.prefix + parameters_str -%}
{% endif -%}
{{ command.format_string.format(parameters = parameters_str) }}

{% endif -%}
{% endif -%}
{% endif -%}
{% endfor -%}
{% endmacro -%}