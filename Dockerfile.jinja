{% if packages is none -%}
{% set pkgs = NEED_EDGE + NEED_COMMUNITY + NEED_TESTING + list(NEED_BUILD_STAGE) + IN_CORE -%}
{% else -%}
{% set pkgs = packages.split() -%}
{% endif -%}

{% set base_tag = BASE_TAG -%}

{% if pkgs|select("in", NEED_EDGE) or pkgs|select("in", NEED_TESTING) -%}
{% set base_tag = EDGE_TAG -%}
{% endif -%}

{% set builder = None -%}
{% set previous_builder = None -%}
{% set previous_builder_binaries_dir = BUILDER_DEFAULT_BINARIES_DIR -%}

ARG BASE_IMAGE={{ BASE_IMAGE }}
ARG BASE_TAG={{ base_tag }}

{% macro build_in_own_stage(package_name, builder_image = None, binaries_dir = None) -%}
{% set previous_builder = builder -%}
{% set builder = package_name + '_builder' -%}
{% do pkgs.remove(package_name) -%}
{% if builder_image is none -%}
{% set builder_image = "${BASE_IMAGE}:${BASE_TAG}" -%}
{% endif -%}

FROM {{ builder_image }} as {{ builder }}

WORKDIR /tmp

COPY {{ NEED_BUILD_STAGE[package_name]["build_script"] }} .

RUN ./build_{{ package_name }}.sh

{% if previous_builder -%}
{% if binaries_dir is none -%}
{% set binaries_dir = previous_builder_binaries_dir -%}
{% endif -%}
COPY --from={{ previous_builder }} {{ previous_builder_binaries_dir }}:{{ binaries_dir }}

{% endif -%}
{% set previous_builder_binaries_dir = binaries_dir -%}
{% endmacro -%}

{% for pkg in NEED_BUILD_STAGE|select("in", pkgs) -%}
build_in_own_stage(pkg)
{% endfor -%}

FROM "${base_image}:${base_image_tag}"

{% set core_pkgs = pkgs|reject("in", NEED_BUILD_STAGE)|reject("in", NEED_TESTING) -%}
{% if core_pkgs -%}
RUN {{ PKG_MGR_INSTALL_FROM_DEFAULT_REPOS.format(pkgs='    ' + '\\\n    '.join(core_pkgs)) }}
{% endif -%}

{% set testing_only_pkgs = pkgs|select("in", NEED_TESTING) -%}
{% if testing_only_pkgs -%}
RUN {{ PKG_MGR_INSTALL_FROM_TESTING.format(pkgs='    ' + '\\\n    '.join(testing_only_pkgs)) }}
{% endif -%}

{% if builder -%}
COPY --from={{ builder }} {{ previous_builder_binaries_dir }}:{{ RUNNER_BINARIES_DIR }}
{% endif -%}