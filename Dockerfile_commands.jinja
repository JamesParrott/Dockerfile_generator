
{% set builder = namespace(
                    name = None,
                    previous = None,
                    previous_binaries_dir = BUILDER_DEFAULT_BINARIES_DIR,
                    ) -%}

{% macro render_commands(pkgs, commands, commands_order, runner_binaries_dir, builder_info = None) -%}
{#  
pkgs: Iterable[str]

commands_order: Iterable[int]

Command zero is especially constructed to copy a dir (e.g. of binaries) from the build stages to the runner image.  
Others are 1-indexed into commands.

Expects commands and commands_order to be the same format as:
 "COMMANDS" : [
      {"format_string" : "RUN apk add --no-cache {parameters}", 
       "supported_parameters" : [git,
                                 gcc
                                ],
       "prefix" : "\\\n    ",
       "separator" : " \\\n    " }, 

 "COMMANDS_ORDER" : [1, 2, 0]
-#}
{% if builder_info is none -%}
    {% set builder_info = builder -%}
{% endif -%}

{% for command_num in commands_order -%}
{% if command_num == 0 -%}
{% if builder_info.name is not none -%}
COPY --from={{ builder_info.name }} {{ builder_info.previous_binaries_dir }} {{ runner_binaries_dir }}

{% endif -%}
{% else -%}
{% set command = commands[command_num - 1] -%}
{# If there are no supported parameters, render the format string verbatim,
to support any hard coded Docker command, or to hardcode installation of
packages that are always needed for your app, so they can be omitted from pkgs.
-#}
{% if command.supported_parameters|length == 0 -%}
{{ command.format_string }}

{% else -%}
{# packages are intended to be allowed to appear in multiple commands,
and they are not restricted to RUN package_manager install ... 
e.g. they can be used to setup ssh accounts for each shell.
-#}
{% set parameters = pkgs|select("in", command.supported_parameters)|list() -%}
{% if parameters|length >= 1 -%}
{% set parameters_str = command.separator.join(parameters) -%}
{% if parameters|length > 1 -%}
{% set parameters_str = command.prefix + parameters_str -%}
{% endif -%}
{{ command.format_string.format(parameters = parameters_str) }}

{% endif -%}
{% endif -%}
{% endif -%}
{% endfor -%}
{% endmacro -%}